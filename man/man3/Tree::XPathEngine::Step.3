.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::XPathEngine::Step 3"
.TH Tree::XPathEngine::Step 3 "2006-02-15" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::XPathEngine::Step \- implements a step in an XPath location path
.SH "METHODS"
.IX Header "METHODS"
These methods should probably not be called from outside of Tree::XPathEngine.
.SS "new"
.IX Subsection "new"
create the step
.ie n .SS "evaluate $nodeset"
.el .SS "evaluate \f(CW$nodeset\fP"
.IX Subsection "evaluate $nodeset"
evaluate the step against a nodeset
.ie n .SS "evaluate_node $node"
.el .SS "evaluate_node \f(CW$node\fP"
.IX Subsection "evaluate_node $node"
evaluate the step against a single node
.SS "axis methods"
.IX Subsection "axis methods"
All these methods return the nodes along the chosen axis
.IP "axis_ancestor =item axis_ancestor_or_self =item axis_attribute =item axis_child =item axis_descendant =item axis_descendant_or_self =item axis_following =item axis_following_sibling =item axis_parent =item axis_preceding =item axis_preceding_sibling =item axis_self" 4
.IX Item "axis_ancestor =item axis_ancestor_or_self =item axis_attribute =item axis_child =item axis_descendant =item axis_descendant_or_self =item axis_following =item axis_following_sibling =item axis_parent =item axis_preceding =item axis_preceding_sibling =item axis_self"
.SS "node_test"
.IX Subsection "node_test"
apply the node test to the nodes gathered by the axis method
.SS "test_attribute"
.IX Subsection "test_attribute"
test on attribute existence
.SS "filter_by_predicate"
.IX Subsection "filter_by_predicate"
filter the results on a predicate
.SS "as_string"
.IX Subsection "as_string"
dump the step as a string
.SS "as_xml"
.IX Subsection "as_xml"
dump the step as xml
.SH "Test type constants"
.IX Header "Test type constants"
These constants are used in this package and in Tree::XPathEngine to describe 
the type of test in a step:
.IP "test_name =item test_any =item test_attr_name =item test_attr_any =item test_nt_text =item test_nt_node" 4
.IX Item "test_name =item test_any =item test_attr_name =item test_attr_any =item test_nt_text =item test_nt_node"
