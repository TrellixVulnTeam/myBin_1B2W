.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPIx::XPath 3"
.TH PPIx::XPath 3 "2016-08-29" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::XPath \- an XPath implementation for the PDOM
.SH "VERSION"
.IX Header "VERSION"
version 2.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use PPI;
\&  use PPIx::XPath;
\&  use Tree::XPathEngine;
\&
\&  my $pdom = PPI::Document\->new(\*(Aqsome_code.pl\*(Aq);
\&  my $xpath = Tree::XPathEngine\->new();
\&  my @subs = $xpath\->findnodes(\*(Aq//Statement\-Sub\*(Aq,$pdom);
\&  my @vars = $xpath\->findnodes(\*(Aq//Token\-Symbol\*(Aq,$pdom);
.Ve
.PP
Deprecated interface, backward-compatible with \f(CW\*(C`PPIx::XPath\*(C'\fR version
1:
.PP
.Vb 1
\&  use PPIx::XPath;
\&
\&  my $pxp  = PPIx::XPath\->new("some_code.pl");
\&  my @subs = $pxp\->match("//Statement::Sub");
\&  my $vars = $pxp\->match("//Token::Symbol");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module augments \s-1PPI\s0's classes with the methods required by
Tree::XPathEngine, allowing you to perform complex XPath matches
against any \s-1PDOM\s0 tree.
.PP
See Tree::XPathEngine for details about its methods.
.SS "Mapping the \s-1PDOM\s0 to the XPath data model"
.IX Subsection "Mapping the PDOM to the XPath data model"
.IP "\(bu" 4
Each node in the \s-1PDOM\s0 is an element as seen by XPath
.IP "\(bu" 4
The name of the element is the class name of the node, minus the
.Sp
initial \f(CW\*(C`PPI::\*(C'\fR, with \f(CW\*(C`::\*(C'\fR replaced by \f(CW\*(C`\-\*(C'\fR. That is:
.Sp
.Vb 1
\&  ($xpath_name = substr($pdom_node\->class,5)) =~ s/::/\-/g;
.Ve
.IP "\(bu" 4
Only \*(L"significant\*(R" nodes are seen by XPath
.IP "\(bu" 4
all scalar-valued accessors of \s-1PDOM\s0 nodes are visible as attributes
.IP "\(bu" 4
\&\*(L"here-docs\*(R" contents are \fInot\fR mapped
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&  my $pxp  = PPIx::XPath\->new("some_code.pl");
\&
\&  my $pxp  = PPIx::XPath\->new($pdom);
.Ve
.PP
Only useful for the backward-compatible, and deprecated, interface.
Returns an instance of \f(CW\*(C`PPIx::XPath\*(C'\fR tied to the given document.
.ie n .SS """clean_xpath_expr"""
.el .SS "\f(CWclean_xpath_expr\fP"
.IX Subsection "clean_xpath_expr"
.Vb 1
\&  my $new_xpath_expr = $pxp\->clean_xpath_expr($old_xpath_expr);
.Ve
.PP
\&\f(CW\*(C`PPIx::XPath\*(C'\fR version 1.0.0 allowed the use of partial package names
(like \f(CW\*(C`Token::Number\*(C'\fR) as element names: this collides with the axis
specification of proper XPath. For this reason, in newer version of
\&\f(CW\*(C`PPIx::XPath\*(C'\fR, the element name is the class name of the \s-1PDOM\s0 node,
minus the initial \f(CW\*(C`PPI::\*(C'\fR, with \f(CW\*(C`::\*(C'\fR replaced by \f(CW\*(C`\-\*(C'\fR (like
\&\f(CW\*(C`Token\-Number\*(C'\fR).
.PP
This method replaces all occurrences of \s-1PPI\s0 package names in the given
string with the new names.
.ie n .SS """match"""
.el .SS "\f(CWmatch\fP"
.IX Subsection "match"
.Vb 2
\&  my @subs = $pxp\->match("//Statement::Sub");
\&  my $vars = $pxp\->match("//Token::Symbol");
.Ve
.PP
Only useful for the backward-compatible, and deprecated,
interface. From the document this instance was built against, returns
the nodes that match the given XPath expression.
.PP
You should not use this method, you should call \f(CW\*(C`findnodes\*(C'\fR instead:
.PP
.Vb 3
\&  my $xpath = Tree::XPathEngine\->new();
\&  my @subs = $xpath\->findnodes(\*(Aq//Statement\-Sub\*(Aq,$pdom);
\&  my @vars = $xpath\->findnodes(\*(Aq//Token\-Symbol\*(Aq,$pdom);
.Ve
.SH "BUGS and LIMITATIONS"
.IX Header "BUGS and LIMITATIONS"
.IP "\(bu" 4
\&\*(L"here-docs\*(R" contents are \fInot\fR mapped
.IP "\(bu" 4
node ordering is slow, because I could not find a way in \s-1PPI\s0 to
.Sp
compare two nodes for document order; suggestions are most welcome
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1PPI\s0
.PP
Tree::XPathEngine
.PP
<http://www.w3.org/TR/xpath> (the XPath specification)
.SH "AUTHORS"
.IX Header "AUTHORS"
Dan Brook <cpan@broquaint.com> original author
.PP
Gianni Ceccarelli <dakkar@thenautilus.net> Tree::XPathEngine\-based re-implementation
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Gianni Ceccarelli <dakkar@thenautilus.net>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
