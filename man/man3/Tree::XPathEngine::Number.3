.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::XPathEngine::Number 3"
.TH Tree::XPathEngine::Number 3 "2006-02-12" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::XPathEngine::Number \- Simple numeric values.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class holds simple numeric values. It doesn't support \-0, +/\- Infinity,
or NaN, as the XPath spec says it should, but I'm not hurting anyone I don't think.
.SH "API"
.IX Header "API"
.SS "new($num)"
.IX Subsection "new($num)"
Creates a new Tree::XPathEngine::Number object, with the value in \f(CW$num\fR. Does some
rudimentary numeric checking on \f(CW$num\fR to ensure it actually is a number.
.SS "\fBvalue()\fP"
.IX Subsection "value()"
Also as overloaded stringification. Returns the numeric value held.
.SS "Other Methods"
.IX Subsection "Other Methods"
Those are needed so the objects can be properly processed in various contexts
.IP "as_string" 4
.IX Item "as_string"
.PD 0
.IP "as_xml" 4
.IX Item "as_xml"
.IP "value" 4
.IX Item "value"
.IP "xpath_cmp" 4
.IX Item "xpath_cmp"
.IP "evaluate" 4
.IX Item "evaluate"
.IP "xpath_to_boolean" 4
.IX Item "xpath_to_boolean"
.IP "xpath_to_literal" 4
.IX Item "xpath_to_literal"
.IP "xpath_to_number" 4
.IX Item "xpath_to_number"
.IP "xpath_string_value" 4
.IX Item "xpath_string_value"
